/* tslint:disable */
/* eslint-disable */
/**
 * RailsTsReact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Post,
    PostFromJSON,
    PostToJSON,
    PostSummary,
    PostSummaryFromJSON,
    PostSummaryToJSON,
} from '../models';

export interface GetPostRequest {
    id: number;
}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI {

    /**
     */
    async getPostRaw(requestParameters: GetPostRequest): Promise<runtime.ApiResponse<Post>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFromJSON(jsonValue));
    }

    /**
     */
    async getPost(requestParameters: GetPostRequest): Promise<Post> {
        const response = await this.getPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getPostsRaw(): Promise<runtime.ApiResponse<Array<PostSummary>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostSummaryFromJSON));
    }

    /**
     */
    async getPosts(): Promise<Array<PostSummary>> {
        const response = await this.getPostsRaw();
        return await response.value();
    }

}
